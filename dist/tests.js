eval("(function() {var inflector;\nmodule(\'ember-inflector.dsl\', {\n  setup: function() {\n    inflector = new Ember.Inflector(/* no rulest == no rules */);\n  },\n  teardown: function() {\n    inflector = undefined;\n  }\n});\n\ntest(\'ability to add additional pluralization rules\', function(){\n  equal(inflector.pluralize(\'cow\'), \'cow\', \'no pluralization rule\');\n\n  inflector.plural(/$/, \'s\');\n\n  equal(inflector.pluralize(\'cow\'), \'cows\', \'pluralization rule was applied\');\n});\n\ntest(\'ability to add additional singularization rules\', function(){\n  equal(inflector.singularize(\'cows\'), \'cows\', \'no singularization rule was applied\');\n\n  inflector.singular(/s$/, \'\');\n\n  equal(inflector.singularize(\'cows\'), \'cow\', \'singularization rule was applied\');\n});\n\ntest(\'ability to add additional uncountable rules\', function(){\n  inflector.plural(/$/, \'s\');\n  equal(inflector.pluralize(\'cow\'), \'cows\', \'pluralization rule was applied\');\n\n  inflector.uncountable(\'cow\');\n  equal(inflector.pluralize(\'cow\'), \'cow\', \'pluralization rule NOT was applied\');\n  equal(inflector.pluralize(\'redCow\'), \'redCow\', \'pluralization rule NOT was applied\');\n  equal(inflector.pluralize(\'red-cow\'), \'red-cow\', \'pluralization rule NOT was applied\');\n});\n\ntest(\'ability to add additional irregular rules\', function(){\n  inflector.singular(/s$/, \'\');\n  inflector.plural(/$/, \'s\');\n\n  equal(inflector.singularize(\'cows\'), \'cow\', \'regular singularization rule was applied\');\n  equal(inflector.pluralize(\'cow\'), \'cows\', \'regular pluralization rule was applied\');\n  \n  equal(inflector.singularize(\'red-cows\'), \'red-cow\', \'regular singularization rule was applied\');\n  equal(inflector.pluralize(\'red-cow\'), \'red-cows\', \'regular pluralization rule was applied\');\n  \n  equal(inflector.singularize(\'redCows\'), \'redCow\', \'regular singularization rule was applied\');\n  equal(inflector.pluralize(\'redCow\'), \'redCows\', \'regular pluralization rule was applied\');\n\n  inflector.irregular(\'cow\', \'kine\');\n\n  equal(inflector.singularize(\'kine\'), \'cow\', \'irregular singularization rule was applied\');\n  equal(inflector.pluralize(\'cow\'), \'kine\', \'irregular pluralization rule was applied\');\n  \n  equal(inflector.singularize(\'red-kine\'), \'red-cow\', \'irregular singularization rule was applied\');\n  equal(inflector.pluralize(\'red-cow\'), \'red-kine\', \'irregular pluralization rule was applied\');\n  \n  equal(inflector.singularize(\'redKine\'), \'redCow\', \'irregular singularization rule was applied\');\n  equal(inflector.pluralize(\'redCow\'), \'redKine\', \'irregular pluralization rule was applied\');\n});\n\ntest(\'ability to add identical singular and pluralizations\',function(){\n\n  inflector.singular(/s$/, \'\');\n  inflector.plural(/$/, \'s\');\n\n  equal(inflector.singularize(\'settings\'),\'setting\',\'regular singularization rule was applied\');\n  equal(inflector.pluralize(\'setting\'),\'settings\',\'regular pluralization rule was applied\');\n\n  inflector.irregular(\'settings\',\'settings\');\n  inflector.irregular(\'userPreferences\',\'userPreferences\');\n\n  equal(inflector.singularize(\'settings\'),\'settings\',\'irregular singularization rule was applied on lowercase word\');\n  equal(inflector.pluralize(\'settings\'),\'settings\',\'irregular pluralization rule was applied on lowercase word\');\n\n  equal(inflector.singularize(\'userPreferences\'),\'userPreferences\',\'irregular singularization rule was applied on camelcase word\');\n  equal(inflector.pluralize(\'userPreferences\'),\'userPreferences\',\'irregular pluralization rule was applied on camelcase word\');\n});\n\nmodule(\'ember-inflector.unit\');\n\ntest(\'plurals\', function() {\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plurals: [\n      [/$/, \'s\'],\n      [/s$/i, \'s\']\n    ]\n  });\n\n  equal(inflector.pluralize(\'apple\'), \'apples\');\n});\n\ntest(\'singularization\',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    singular: [\n      [/s$/i, \'\'],\n      [/(ss)$/i, \'$1\']\n    ]\n  });\n\n  equal(inflector.singularize(\'apple\'), \'apple\');\n});\n\ntest(\'singularization of irregular singulars\', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    singular: [\n      [/s$/i, \'\'],\n      [/(ss)$/i, \'$1\']\n    ],\n    irregularPairs: [\n      [\'lens\', \'lenses\']\n    ]\n  });\n\n  equal(inflector.singularize(\'lens\'), \'lens\');\n});\n\ntest(\'pluralization of irregular plurals\', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plurals: [\n      [/$/,\'s\']\n    ],\n    irregularPairs: [\n      [\'person\', \'people\']\n    ]\n  });\n\n  equal(inflector.pluralize(\'people\'), \'people\');\n});\n\ntest(\'plural\',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plurals: [\n      [\'1\', \'1\'],\n      [\'2\', \'2\'],\n      [\'3\', \'3\']\n    ]\n  });\n\n  equal(inflector.rules.plurals.length, 3);\n});\n\ntest(\'singular\',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    singular: [\n      [\'1\', \'1\'],\n      [\'2\', \'2\'],\n      [\'3\', \'3\']\n    ]\n  });\n\n  equal(inflector.rules.singular.length, 3);\n});\n\ntest(\'irregular\',function(){\n  expect(6);\n\n  var inflector = new Ember.Inflector({\n    irregularPairs: [\n      [\'1\', \'12\'],\n      [\'2\', \'22\'],\n      [\'3\', \'32\']\n    ]\n  });\n\n  equal(inflector.rules.irregular[\'1\'], \'12\');\n  equal(inflector.rules.irregular[\'2\'], \'22\');\n  equal(inflector.rules.irregular[\'3\'], \'32\');\n\n  equal(inflector.rules.irregularInverse[\'12\'], \'1\');\n  equal(inflector.rules.irregularInverse[\'22\'], \'2\');\n  equal(inflector.rules.irregularInverse[\'32\'], \'3\');\n});\n\ntest(\'uncountable\',function(){\n  expect(3);\n\n  var inflector = new Ember.Inflector({\n    uncountable: [\n      \'1\',\n      \'2\',\n      \'3\'\n    ]\n  });\n\n  equal(inflector.rules.uncountable[\'1\'], true);\n  equal(inflector.rules.uncountable[\'2\'], true);\n  equal(inflector.rules.uncountable[\'3\'], true);\n});\n\ntest(\'inflect.nothing\', function(){\n  expect(2);\n\n  var inflector = new Ember.Inflector();\n\n  equal(inflector.inflect(\'\',  []), \'\');\n  equal(inflector.inflect(\' \', []), \' \');\n});\n\ntest(\'inflect.noRules\',function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n\n  equal(inflector.inflect(\'word\', []),\'word\');\n});\n\ntest(\'inflect.uncountable\', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector({\n    plural: [\n      [/$/,\'s\']\n    ],\n    uncountable: [\n      \'word\'\n    ]\n  });\n\n  var rules = [];\n\n  equal(inflector.inflect(\'word\', rules), \'word\');\n});\n\ntest(\'inflect.irregular\', function(){\n  expect(2);\n\n  var inflector = new Ember.Inflector({\n    irregularPairs: [\n      [\'word\', \'wordy\']\n    ]\n  });\n\n  var rules = [];\n\n  equal(inflector.inflect(\'word\', rules, inflector.rules.irregular), \'wordy\');\n  equal(inflector.inflect(\'wordy\', rules, inflector.rules.irregularInverse), \'word\');\n});\n\ntest(\'inflect.basicRules\', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n  var rules = [[/$/, \'s\']];\n\n  equal(inflector.inflect(\'word\', rules ), \'words\');\n});\n\ntest(\'inflect.advancedRules\', function(){\n  expect(1);\n\n  var inflector = new Ember.Inflector();\n  var rules = [[/^(ox)$/i, \'$1en\']];\n\n  equal(inflector.inflect(\'ox\', rules), \'oxen\');\n});\n\ntest(\'Inflector.defaultRules\', function(){\n  expect(1);\n\n  var rules = Ember.Inflector.defaultRules;\n  ok(rules, \'has defaultRules\');\n});\n\ntest(\'Ember.Inflector.inflector exists\', function(){\n  expect(1);\n\n  ok(Ember.Inflector.inflector, \'Ember.Inflector.inflector exists\');\n});\n\ntest(\'new Ember.Inflector with defaultRules matches docs\', function(){\n  expect(4);\n\n  var inflector = new Ember.Inflector(Ember.Inflector.defaultRules);\n\n  // defaultRules includes these special rules\n  equal(inflector.pluralize(\'cow\'), \'kine\');\n  equal(inflector.singularize(\'kine\'), \'cow\');\n\n  // defaultRules adds \'s\' to singular\n  equal(inflector.pluralize(\'item\'), \'items\');\n\n  // defaultRules removes \'s\' from plural\n  equal(inflector.singularize(\'items\'), \'item\');\n});\n})();//@ sourceURL=ember-inflector/tests/system/inflector_test.js");

eval("(function() {var run = Ember.run;\nvar view, lookup, text;\nvar originalLookup = Ember.lookup;\n\nfunction appendView(view) {\n  run(function() { view.appendTo(\'#qunit-fixture\'); });\n}\n\nmodule(\"ember-inflector.integration\");\n\ntest(\"pluralize\", function(){\n  expect(3);\n\n  equal(Ember.String.pluralize(\'word\'),     \'words\');\n  equal(Ember.String.pluralize(\'ox\'),       \'oxen\');\n  equal(Ember.String.pluralize(\'octopus\'),  \'octopi\');\n});\n\ntest(\"singularize\", function(){\n  expect(3);\n\n  equal(Ember.String.singularize(\'words\'),  \'word\');\n  equal(Ember.String.singularize(\'oxen\'),   \'ox\');\n  equal(Ember.String.singularize(\'octopi\'), \'octopus\');\n});\n\nmodule(\"ember-inflector.integration - Handlebars Helpers\", {\n\n  setup: function(){\n    Ember.lookup = lookup = {Ember: Ember};\n    run(function(){\n      view = Ember.View.create({\n        template: Ember.Handlebars.compile(\"{{singularize plural}} {{pluralize single}} {{pluralize 1 singleArg}} {{pluralize 2 multiple}} {{pluralize one boundSingle}} {{pluralize oneString boundSingleString}} {{pluralize two boundMultiple}}\"),\n        context: {\n          plural: \"octopi\",\n          single: \"ox\",\n          singleArg: \"opossums\",\n          multiple: \"ocelot\",\n          one: 1,\n          two: 2,\n          oneString: \"1.0\",\n          boundSingle: \"oranges\",\n          boundSingleString: \"owls\",\n          boundMultiple: \"omnivore\"\n        }\n      });\n\n      appendView(view);\n      text = $(\"#qunit-fixture\").text();\n    });\n  },\n\n  teardown: function(){\n    run(view, \'destroy\');\n    Ember.lookup = originalLookup;\n  }\n});\n\ntest(\"helpers - singularize\", function(){\n  ok(text.match(/octopus/));\n});\n\ntest(\"helpers - pluralize - single arg\", function(){\n  ok(text.match(/oxen/));\n});\n\ntest(\"helpers - pluralize - one\", function(){\n  ok(text.match(/1 opossum/), text);\n});\n\ntest(\"helpers - pluralize - multiple\", function(){\n  ok(text.match(/2 ocelots/));\n});\n\ntest(\"helpers - pluralize - boundSingle\", function(){\n  ok(text.match(/1 orange/));\n});\n\ntest(\"helpers - pluralize - boundSingle - string\", function(){\n  ok(text.match(/1.0 owl/));\n});\n\ntest(\"helpers - pluralize - boundMultiple\", function(){\n  ok(text.match(/2 omnivores/));\n});\n})();//@ sourceURL=ember-inflector/tests/system/integration_test.js");
